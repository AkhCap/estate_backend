"""initial

Revision ID: d2e21b10a40e
Revises: 
Create Date: 2025-03-20 17:27:52.249345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd2e21b10a40e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_developer_projects_id', table_name='developer_projects')
    op.drop_table('developer_projects')
    op.drop_index('ix_realtor_requests_id', table_name='realtor_requests')
    op.drop_table('realtor_requests')
    op.drop_index('ix_agent_requests_id', table_name='agent_requests')
    op.drop_table('agent_requests')
    op.drop_index('ix_realtor_profiles_id', table_name='realtor_profiles')
    op.drop_table('realtor_profiles')
    op.drop_index('ix_agent_profiles_id', table_name='agent_profiles')
    op.drop_table('agent_profiles')
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'client'::character varying"))
    op.drop_column('users', 'company_name')
    op.drop_column('users', 'verification_documents')
    op.drop_column('users', 'developer_data')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'license_number')
    op.drop_column('users', 'company_phone')
    op.drop_column('users', 'registration_number')
    op.drop_column('users', 'last_active')
    op.drop_column('users', 'company_website')
    op.drop_column('users', 'company_inn')
    op.drop_column('users', 'rejection_reason')
    op.drop_column('users', 'legal_name')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'agent_data')
    op.drop_column('users', 'rating')
    op.drop_column('users', 'reviews_count')
    op.drop_column('users', 'experience_years')
    op.drop_column('users', 'company_address')
    op.drop_column('users', 'company_description')
    op.drop_column('users', 'deals_count')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('deals_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('experience_years', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('reviews_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('agent_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('legal_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('rejection_reason', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_inn', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_website', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_active', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('registration_number', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('license_number', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('developer_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('verification_documents', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'client'::character varying"))
    op.create_table('agent_profiles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('agent_profiles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('experience_years', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('specializations', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_deals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='agent_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='agent_profiles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_agent_profiles_id', 'agent_profiles', ['id'], unique=False)
    op.create_table('realtor_profiles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('realtor_profiles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('experience_years', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('specializations', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_deals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='realtor_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='realtor_profiles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_realtor_profiles_id', 'realtor_profiles', ['id'], unique=False)
    op.create_table('agent_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'ACCEPTED', 'REJECTED', 'COMPLETED', 'CANCELLED', name='agent_request_status_enum'), autoincrement=False, nullable=True),
    sa.Column('property_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('deal_type', postgresql.ENUM('SALE', 'RENT', name='deal_type_enum'), autoincrement=False, nullable=False),
    sa.Column('min_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rooms', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('additional_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agent_profiles.id'], name='agent_requests_agent_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='agent_requests_client_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='agent_requests_pkey')
    )
    op.create_index('ix_agent_requests_id', 'agent_requests', ['id'], unique=False)
    op.create_table('realtor_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('realtor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'ACCEPTED', 'REJECTED', 'COMPLETED', 'CANCELLED', name='realtor_request_status_enum'), autoincrement=False, nullable=True),
    sa.Column('property_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('deal_type', postgresql.ENUM('SALE', 'RENT', name='deal_type_enum'), autoincrement=False, nullable=False),
    sa.Column('min_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rooms', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('additional_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='realtor_requests_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['realtor_id'], ['realtor_profiles.id'], name='realtor_requests_realtor_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='realtor_requests_pkey')
    )
    op.create_index('ix_realtor_requests_id', 'realtor_requests', ['id'], unique=False)
    op.create_table('developer_projects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('developer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('total_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('completion_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amenities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['developer_id'], ['users.id'], name='developer_projects_developer_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='developer_projects_pkey')
    )
    op.create_index('ix_developer_projects_id', 'developer_projects', ['id'], unique=False)
    # ### end Alembic commands ###
