from sqlalchemy.orm import Session, joinedload, selectinload
from app import models, schemas
from typing import Optional, List, Dict
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException, status
from sqlalchemy import func, desc, distinct, or_, text
from . import auth
import logging
from passlib.context import CryptContext
from datetime import datetime

logger = logging.getLogger(__name__)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
def get_user_by_email(db: Session, email: str) -> Optional[models.User]:
    user = db.query(models.User).filter(models.User.email == email).first()
    print(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {email} -> –ù–∞–π–¥–µ–Ω: {user}")  # üõ† DEBUG
    return user


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user(db: Session, user: schemas.UserCreate, hashed_password: str) -> models.User:
    db_user = models.User(
        email=user.email,
        hashed_password=hashed_password,
        first_name=user.first_name,
        phone=user.phone
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
def update_user(db: Session, user_id: int, updated_data: schemas.UserUpdate) -> Optional[models.User]:
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if updated_data.email is not None:
        user.email = updated_data.email
    if updated_data.first_name is not None:
        user.first_name = updated_data.first_name
    if updated_data.phone is not None:
        user.phone = updated_data.phone
    if updated_data.avatar_url is not None:
        user.avatar_url = updated_data.avatar_url

    try:
        db.commit()
        db.refresh(user)
    except SQLAlchemyError as e:
        db.rollback()
        raise e

    return user



# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def get_properties(db: Session, skip: int = 0, limit: int = 10):
    properties = db.query(models.Property).offset(skip).limit(limit).all()
    
    for property in properties:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –ø–æ–ª—è –≤ —Å–ø–∏—Å–∫–∏
        property.windowView = property.windowView or []
        property.parking = property.parking or []
        property.livingConditions = property.livingConditions or []
        property.contactMethod = property.contactMethod or []
    
    return properties

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID
def get_property(db: Session, property_id: int, user_id: int = None):
    prop = db.query(models.Property).options(
        joinedload(models.Property.price_history)
    ).filter(models.Property.id == property_id).first()
    
    if prop:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –ø–æ–ª—è –≤ —Å–ø–∏—Å–∫–∏
        prop.window_view = prop.window_view or []
        prop.parking = prop.parking or []
        prop.living_conditions = prop.living_conditions or []
        prop.contact_method = prop.contact_method or []
        prop.furniture = prop.furniture or []
        prop.appliances = prop.appliances or []
        prop.connectivity = prop.connectivity or []
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_viewed –≤ False
        prop.is_viewed = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (user_id –Ω–µ None)
        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if user_id and prop.owner_id != user_id:
            view = db.query(models.PropertyViews).filter(
                models.PropertyViews.user_id == user_id,
                models.PropertyViews.property_id == property_id
            ).first()
            prop.is_viewed = view is not None
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        if prop.price_history:
            prop.price_history.sort(key=lambda x: x.change_date, reverse=True)
            
    return prop

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def create_property(db: Session, property: schemas.PropertyCreate, owner_id: int):
    db_property = models.Property(
        title=property.title,
        description=property.description,
        price=property.price,
        address=property.address,
        rooms=property.rooms,
        area=property.area,
        floor=property.floor,
        total_floors=property.total_floors,
        property_type=property.property_type,
        deal_type=property.deal_type,
        owner_id=owner_id,
        property_condition=property.property_condition or "",
        has_balcony=property.has_balcony if property.has_balcony is not None else False,
        window_view=property.window_view or [],
        bathroom=property.bathroom or "",
        bath_type=property.bath_type or "",
        heating=property.heating or "",
        renovation=property.renovation or "",
        lifts_passenger=property.lifts_passenger or 0,
        lifts_freight=property.lifts_freight or 0,
        parking=property.parking or [],
        prepayment=property.prepayment or "–Ω–µ—Ç",
        deposit=property.deposit or 0.0,
        living_conditions=property.living_conditions or [],
        who_rents=property.who_rents or "",
        landlord_contact=property.landlord_contact or "",
        contact_method=property.contact_method or [],
        furniture=property.furniture or [],
        appliances=property.appliances or [],
        connectivity=property.connectivity or [],
        build_year=property.build_year
    )

    db.add(db_property)
    db.commit()
    db.refresh(db_property)
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
    create_price_history(db, db_property.id, db_property.price)
    
    return db_property

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def update_property(db: Session, property_id: int, property_update: schemas.PropertyUpdate) -> Optional[models.Property]:
    db_property = get_property(db, property_id)
    if not db_property:
        return None

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if 'price' in property_update.dict(exclude_unset=True) and property_update.price != db_property.price:
        old_price = db_property.price
        create_price_history(db, property_id, old_price)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    update_data = property_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_property, field, value)

    try:
        db.commit()
        db.refresh(db_property)
        return db_property
    except Exception as db_error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {db_error}")
        db.rollback()
        raise

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def delete_property(db: Session, property_id: int) -> Optional[models.Property]:
    db_property = get_property(db, property_id)
    if not db_property:
        return None

    db.delete(db_property)
    db.commit()
    return db_property

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
def get_favorite_by_user_and_property(db: Session, user_id: int, property_id: int):
    return db.query(models.Favorite).filter(
        models.Favorite.user_id == user_id,
        models.Favorite.property_id == property_id
    ).first()

def add_to_favorites(db: Session, user_id: int, property_id: int) -> Optional[models.Favorite]:
    existing_favorite = get_favorite_by_user_and_property(db, user_id, property_id)
    if existing_favorite:
        return existing_favorite

    fav = models.Favorite(user_id=user_id, property_id=property_id)
    db.add(fav)
    db.commit()
    db.refresh(fav)
    return fav

def get_favorites(db: Session, user_id: int) -> List[models.Favorite]:
    return db.query(models.Favorite)\
        .filter(models.Favorite.user_id == user_id)\
        .options(
            joinedload(models.Favorite.property).joinedload(models.Property.images)
        )\
        .all()

def remove_from_favorites(db: Session, user_id: int, property_id: int) -> Optional[models.Favorite]:
    favorite = get_favorite_by_user_and_property(db, user_id, property_id)
    if favorite:
        db.delete(favorite)
        db.commit()
    return favorite

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
def add_property_image(db: Session, property_id: int, image_url: str) -> models.PropertyImage:
    image = models.PropertyImage(property_id=property_id, image_url=image_url)
    db.add(image)
    db.commit()
    db.refresh(image)
    return image

def get_property_images(db: Session, property_id: int) -> List[models.PropertyImage]:
    return db.query(models.PropertyImage).filter(models.PropertyImage.property_id == property_id).all()

# –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
def create_history(db: Session, history: schemas.HistoryCreate, user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
    existing_history = db.query(models.History).filter(
        models.History.user_id == user_id,
        models.History.property_id == history.property_id
    ).first()
    
    if existing_history:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        existing_history.viewed_at = datetime.now()
        db.commit()
        db.refresh(existing_history)
        return existing_history
    
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    db_history = models.History(
        user_id=user_id,
        property_id=history.property_id
    )
    db.add(db_history)
    db.commit()
    db.refresh(db_history)
    return db_history

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
def add_property_view(db: Session, user_id: int, property_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    view = models.PropertyViews(user_id=user_id, property_id=property_id)
    db.add(view)
    db.commit()
    db.refresh(view)
    return view

def is_property_viewed(db: Session, user_id: int, property_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    property = db.query(models.Property).filter(models.Property.id == property_id).first()
    if not property or property.owner_id == user_id:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    view = db.query(models.PropertyViews).filter(
        models.PropertyViews.user_id == user_id,
        models.PropertyViews.property_id == property_id
    ).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    history = db.query(models.History).filter(
        models.History.user_id == user_id,
        models.History.property_id == property_id
    ).first()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    return view is not None and history is not None

# –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
def create_price_history(db: Session, property_id: int, price: float) -> models.PriceHistory:
    db_price_history = models.PriceHistory(
        property_id=property_id,
        price=price
    )
    db.add(db_price_history)
    db.commit()
    db.refresh(db_price_history)
    return db_price_history

def get_price_history(db: Session, property_id: int, limit: int = 2) -> List[models.PriceHistory]:
    return db.query(models.PriceHistory)\
        .filter(models.PriceHistory.property_id == property_id)\
        .order_by(models.PriceHistory.change_date.desc())\
        .limit(limit)\
        .all()

def get_price_change_percentage(db: Session, property_id: int) -> Optional[float]:
    history = get_price_history(db, property_id, limit=2)
    if len(history) < 2:
        return None
    
    old_price = history[1].price
    new_price = history[0].price
    return ((new_price - old_price) / old_price) * 100

def authenticate_user(db: Session, email: str, password: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        print(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        user = db.query(models.User).filter(models.User.email == email).first()
        if not user:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            return None
        
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not pwd_context.verify(password, user.hashed_password):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            return None
            
        print(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return user
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None

def get_user(db: Session, user_id: int) -> Optional[models.User]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    return db.query(models.User).filter(models.User.id == user_id).first()

# –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
def create_user_review(db: Session, review: schemas.UserReviewCreate, reviewer_id: int) -> models.UserReview:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ
    if reviewer_id == review.reviewed_user_id:
        raise ValueError("–ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
    existing_review = db.query(models.UserReview).filter(
        models.UserReview.reviewer_id == reviewer_id,
        models.UserReview.reviewed_user_id == review.reviewed_user_id
    ).first()
    
    if existing_review:
        raise ValueError("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    db_review = models.UserReview(
        reviewer_id=reviewer_id,
        reviewed_user_id=review.reviewed_user_id,
        rating=review.rating,
        comment=review.comment,
    )
    db.add(db_review)
    db.commit()
    db.refresh(db_review)
    return db_review

def get_user_reviews(db: Session, user_id: int, skip: int = 0, limit: int = 10) -> List[models.UserReview]:
    return (
        db.query(models.UserReview)
        .filter(models.UserReview.reviewed_user_id == user_id)
        .offset(skip)
        .limit(limit)
        .all()
    )

def get_user_review_by_reviewer(db: Session, reviewer_id: int, reviewed_user_id: int) -> Optional[models.UserReview]:
    return (
        db.query(models.UserReview)
        .filter(
            models.UserReview.reviewer_id == reviewer_id,
            models.UserReview.reviewed_user_id == reviewed_user_id
        )
        .first()
    )

def update_user_review(db: Session, review_id: int, review_update: schemas.UserReviewUpdate) -> Optional[models.UserReview]:
    db_review = db.query(models.UserReview).filter(models.UserReview.id == review_id).first()
    if db_review:
        if review_update.rating is not None:
            db_review.rating = review_update.rating
        if review_update.comment is not None:
            db_review.comment = review_update.comment

        db.commit()
        db.refresh(db_review)
    return db_review

def delete_user_review(db: Session, review_id: int):
    review = db.query(models.UserReview).filter(models.UserReview.id == review_id).first()
    if review:
        db.delete(review)
        db.commit()
    return review

def get_user_rating_stats(db: Session, user_id: int) -> Dict:
    reviews = db.query(models.UserReview).filter(models.UserReview.reviewed_user_id == user_id).all()
    
    if not reviews:
        return {
            "average_rating": 0.0,
            "total_reviews": 0,
            "rating_distribution": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
        }
    
    total_rating = sum(review.rating for review in reviews)
    rating_distribution = {i: 0 for i in range(1, 6)}
    
    for review in reviews:
        rating_distribution[review.rating] += 1
    
    return {
        "average_rating": round(total_rating / len(reviews), 2),
        "total_reviews": len(reviews),
        "rating_distribution": rating_distribution
    }

def get_history_by_user(db: Session, user_id: int) -> List[models.History]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return db.query(models.History)\
        .filter(models.History.user_id == user_id)\
        .order_by(models.History.viewed_at.desc())\
        .all()

def set_main_image(db: Session, property_id: int, image_id: int) -> models.PropertyImage:
    # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
    db.query(models.PropertyImage).filter(
        models.PropertyImage.property_id == property_id,
        models.PropertyImage.is_main == True
    ).update({"is_main": False})
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
    image = db.query(models.PropertyImage).filter(
        models.PropertyImage.id == image_id,
        models.PropertyImage.property_id == property_id
    ).first()
    
    if not image:
        raise HTTPException(status_code=404, detail="Image not found")
        
    image.is_main = True
    db.commit()
    db.refresh(image)
    return image

def update_existing_images(db: Session):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è is_main=False —Ç–∞–º, –≥–¥–µ –æ–Ω–æ NULL"""
    try:
        db.execute(text("UPDATE property_images SET is_main = FALSE WHERE is_main IS NULL"))
        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"Error updating existing images: {str(e)}")
        return False
