from datetime import datetime
from pydantic import BaseModel, EmailStr
from typing import Optional, List
from enum import Enum

# üîπ ENUM –¥–ª—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
class DealType(str, Enum):
    SALE = "sale"
    RENT = "rent"

# üîπ ENUM –¥–ª—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserRole(str, Enum):
    PRIVATE = "private"  # –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ
    AGENT = "agent"  # –ê–≥–µ–Ω—Ç
    DEVELOPER = "developer"  # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫

# üîπ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserBase(BaseModel):
    email: EmailStr
    username: str

# üîπ –°—Ö–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserCreate(UserBase):
    password: str
    role: UserRole = UserRole.PRIVATE
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None

class UserUpdate(BaseModel):
    email: Optional[EmailStr] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None
    avatar_url: Optional[str] = None

# üîπ –°—Ö–µ–º–∞ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
class UserOut(BaseModel):
    id: int
    email: EmailStr
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None
    avatar_url: Optional[str] = None
    is_active: bool

    model_config = {"from_attributes": True}

# üîπ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
class PropertyBase(BaseModel):
    title: str
    description: Optional[str] = None
    price: float
    address: str
    rooms: Optional[str] = None
    area: Optional[float] = None
    floor: Optional[int] = None
    total_floors: Optional[int] = None
    property_type: str
    deal_type: DealType

    class Config:
        from_attributes = True

class PropertyImageOut(BaseModel):
    id: int
    image_url: str

    model_config = {"from_attributes": True}

class PropertyCreate(BaseModel):
    title: str
    description: str
    price: float
    address: str
    rooms: str  
    area: float
    floor: int
    total_floors: int
    property_type: str
    owner_id: int
    deal_type: DealType
    ceiling_height: Optional[float] = None
    property_condition: Optional[str] = None
    has_balcony: Optional[bool] = False
    window_view: Optional[List[str]] = []
    bathroom: Optional[str] = None
    bath_type: Optional[str] = None
    heating: Optional[str] = None
    renovation: Optional[str] = None
    lifts_passenger: Optional[int] = 0
    lifts_freight: Optional[int] = 0
    parking: Optional[List[str]] = []
    prepayment: Optional[str] = "–Ω–µ—Ç"
    deposit: Optional[float] = 0.0
    living_conditions: Optional[List[str]] = []
    who_rents: Optional[str] = None
    landlord_contact: Optional[str] = None
    contact_method: Optional[List[str]] = []
    build_year: Optional[int] = None
    furniture: Optional[List[str]] = []
    appliances: Optional[List[str]] = []
    connectivity: Optional[List[str]] = []

    model_config = {"from_attributes": True}

# üîπ –°—Ö–µ–º–∞ –≤—ã–≤–æ–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
class PropertyOut(BaseModel):
    id: int
    title: str
    description: Optional[str]
    price: float
    address: str
    rooms: str  
    area: float
    floor: int
    total_floors: int
    property_type: str
    deal_type: DealType
    owner_id: int
    ceiling_height: Optional[float] = None
    property_condition: Optional[str] = None
    has_balcony: Optional[bool] = False
    window_view: List[str] = []
    bathroom: Optional[str] = None
    bath_type: Optional[str] = None
    heating: Optional[str] = None
    renovation: Optional[str] = None
    lifts_passenger: Optional[int] = 0
    lifts_freight: Optional[int] = 0
    parking: List[str] = []
    prepayment: Optional[str] = "–Ω–µ—Ç"
    deposit: Optional[float] = 0.0
    living_conditions: List[str] = []
    who_rents: Optional[str] = None
    landlord_contact: Optional[str] = None
    contact_method: List[str] = []
    images: List[PropertyImageOut] = []
    build_year: Optional[int] = None
    furniture: List[str] = []
    appliances: List[str] = []
    connectivity: List[str] = []

    model_config = {"from_attributes": True}

# üîπ –°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
class PropertyUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = None
    address: Optional[str] = None
    rooms: Optional[str] = None
    area: Optional[float] = None
    floor: Optional[int] = None
    total_floors: Optional[int] = None
    property_type: Optional[str] = None
    deal_type: Optional[DealType] = None

    model_config = {"from_attributes": True}

# üîπ –°—Ö–µ–º—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
class FavoriteBase(BaseModel):
    property_id: int

class FavoriteCreate(FavoriteBase):
    pass

class FavoriteOut(BaseModel):
    id: int
    property_id: int
    created_at: datetime

    model_config = {"from_attributes": True}

# üîπ –°—Ö–µ–º—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
class ReviewBase(BaseModel):
    rating: int
    comment: Optional[str] = None

class ReviewCreate(ReviewBase):
    property_id: int

class ReviewOut(ReviewBase):
    id: int
    user_id: int
    property_id: int

    model_config = {"from_attributes": True}

class HistoryBase(BaseModel):
    property_id: int

class HistoryCreate(HistoryBase):
    pass

class HistoryOut(HistoryBase):
    id: int
    viewed_at: datetime

    model_config = {"from_attributes": True}

# üîπ –°—Ö–µ–º–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str