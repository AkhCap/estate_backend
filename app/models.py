import enum
from sqlalchemy import Column, Integer, String, Float, Boolean, ForeignKey, Enum, DateTime, func
from sqlalchemy.orm import relationship
from app.database import Base


# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserRoleEnum(str, enum.Enum):  
    PRIVATE = "private"  # –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ
    AGENT = "agent"  # –ê–≥–µ–Ω—Ç
    DEVELOPER = "developer"  # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫


# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏
class DealTypeEnum(str, enum.Enum):  
    SALE = "sale"
    RENT = "rent"

    
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)
    role = Column(Enum(UserRoleEnum), nullable=False, default=UserRoleEnum.PRIVATE)

    properties = relationship("Property", back_populates="owner", cascade="all, delete-orphan")  # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    favorites = relationship("Favorite", back_populates="user", cascade="all, delete-orphan")  # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reviews = relationship("Review", back_populates="user", cascade="all, delete-orphan")  # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class Property(Base):
    __tablename__ = "properties"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True, nullable=False)
    description = Column(String)
    price = Column(Float, nullable=False)
    address = Column(String, nullable=False)
    rooms = Column(Integer)
    area = Column(Float)
    floor = Column(Integer)
    total_floors = Column(Integer)  
    property_type = Column(String, nullable=False)
    latitude = Column(Float)
    longitude = Column(Float)
    image_url = Column(String)
    owner_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)  # ‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # ENUM —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Pydantic
    deal_type = Column(Enum(DealTypeEnum, name="deal_type_enum", create_type=False), nullable=False)

    # –°–≤—è–∑–∏
    owner = relationship("User", back_populates="properties")
    favorited_by = relationship("Favorite", back_populates="property", cascade="all, delete-orphan")  # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    reviews = relationship("Review", back_populates="property", cascade="all, delete-orphan")  # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è


class Favorite(Base):
    __tablename__ = "favorites"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    property_id = Column(Integer, ForeignKey("properties.id", ondelete="CASCADE"), nullable=False)  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ CASCADE
    created_at = Column(DateTime, server_default=func.now())

    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="favorites")
    property = relationship("Property", back_populates="favorited_by")


class Review(Base):
    __tablename__ = "reviews"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ CASCADE
    property_id = Column(Integer, ForeignKey("properties.id", ondelete="CASCADE"), nullable=False)  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ CASCADE
    rating = Column(Float, nullable=False)  # –û—Ü–µ–Ω–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 5
    comment = Column(String, nullable=True)
    created_at = Column(DateTime, server_default=func.now())

    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="reviews")
    property = relationship("Property", back_populates="reviews")