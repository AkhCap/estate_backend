from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from app import schemas, models, crud, auth
from app.database import SessionLocal, engine
from passlib.context import CryptContext
from typing import List

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
models.Base.metadata.create_all(bind=engine)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
@router.post("/register", response_model=schemas.UserOut)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    hashed_password = pwd_context.hash(user.password)
    created_user = crud.create_user(db=db, user=user, hashed_password=hashed_password)

    return schemas.UserOut.model_validate(created_user)

# üîπ –õ–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
@router.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = crud.get_user_by_email(db, email=form_data.username)
    if not user or not pwd_context.verify(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    token = auth.create_access_token(data={"sub": user.email})
    return {"access_token": token, "token_type": "bearer"}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/me", response_model=schemas.UserOut)
def read_current_user(
    current_user: str = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    user = crud.get_user_by_email(db, email=current_user)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return schemas.UserOut.model_validate(user)  # ‚úÖ

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/me/properties", response_model=List[schemas.PropertyOut])
def read_my_properties(
    current_user: str = Depends(auth.get_current_user),
    db: Session = Depends(get_db)
):
    user = crud.get_user_by_email(db, email=current_user)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return [schemas.PropertyOut.model_validate(prop) for prop in user.properties]  # ‚úÖ

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@router.post("/favorites", response_model=schemas.FavoriteOut, summary="Add property to favorites")
def add_favorite(
    favorite: schemas.FavoriteCreate,
    db: Session = Depends(get_db),
    current_user: str = Depends(auth.get_current_user)
):
    user = crud.get_user_by_email(db, email=current_user)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    property_exists = crud.get_property(db, property_id=favorite.property_id)
    if not property_exists:
        raise HTTPException(status_code=404, detail="Property not found")

    existing_favorite = crud.get_favorite_by_user_and_property(db, user_id=user.id, property_id=favorite.property_id)
    if existing_favorite:
        return schemas.FavoriteOut.model_validate(existing_favorite)  # ‚úÖ

    fav = crud.add_to_favorites(db, user_id=user.id, property_id=favorite.property_id)
    return schemas.FavoriteOut.model_validate(fav)  # ‚úÖ

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.delete("/favorites/{property_id}", response_model=schemas.FavoriteOut, summary="Remove property from favorites")
def remove_favorite(
    property_id: int,
    db: Session = Depends(get_db),
    current_user: str = Depends(auth.get_current_user)
):
    user = crud.get_user_by_email(db, email=current_user)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    fav = crud.get_favorite_by_user_and_property(db, user_id=user.id, property_id=property_id)
    if not fav:
        raise HTTPException(status_code=404, detail="Favorite not found")

    removed_favorite = crud.remove_from_favorites(db, user_id=user.id, property_id=property_id)
    return schemas.FavoriteOut.model_validate(removed_favorite)  # ‚úÖ

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.get("/favorites", response_model=List[schemas.FavoriteOut])
def list_favorites(
    db: Session = Depends(get_db),
    current_user: str = Depends(auth.get_current_user)
):
    user = crud.get_user_by_email(db, email=current_user)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    favorites = crud.get_favorites(db, user_id=user.id)
    return [schemas.FavoriteOut.model_validate(fav) for fav in favorites]  # ‚úÖ